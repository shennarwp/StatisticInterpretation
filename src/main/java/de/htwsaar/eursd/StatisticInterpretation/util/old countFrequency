--------------------------------------CONTINUOUS/STETIG--------------------------------------
	/**
	 * count the absolute and relative frequencies of attributes which have double as values
	 * (only continuous categories / stetige Merkmale)
	 * @return ft FrequencyTable Object which contains the table data
	 */
	@Override
	FrequencyTable countFrequency() {
		Double[] boundary = getBoundary;

		counters for the absolut frequencies
		long count0 = 0, count1 = 0, count2 = 0;
		long count3 = 0, count4 = 0;

		for(MedicalRecord record : records) {
			double value = 0;
			switch (CHOSENCATEGORY) {								switch between attribute chosen
				case WEIGHT 			: value = record.getWeight(); break;
				case AGE 				: value = record.getAge(); break;
				case TEMP0 				: value = record.getTemp0(); break;
				case TEMP12 			: value = record.getTemp12(); break;
				case BLOODPRESSURE0 	: value = record.getBloodPressure0(); break;
				case BLOODPRESSURE12 	: value = record.getBloodPressure12(); break;
				case DIFFERENCE 		: value = record.getDifference(); break;
				default					: break;
			}

			count the absolute frequencies
			if(value > boundary[0] && value < boundary[1])
				count0++;
			if(value > boundary[1] && value < boundary[2])
				count1++;
			if(value > boundary[2] && value < boundary[3])
				count2++;
			if(value > boundary[3] && value < boundary[4])
				count3++;
			if(value > boundary[4] && value < boundary[5])
				count4++;
		}


		String[] group = new String[boundary.length-1];
		for(int i = 0; i < group.length; i++) {
			group[i] = String.valueOf(boundary[i]) + " - " + String.valueOf(boundary[i + 1]);
		}

		long[] totalAbsolut = new long[5];
		totalAbsolut[0] = count0;
		totalAbsolut[1] = count1;
		totalAbsolut[2] = count2;
		totalAbsolut[3] = count3;
		totalAbsolut[4] = count4;

		count the relative frequencies
		double[] totalRelative = new double[5];
		totalRelative[0] = count0 / (double)totalPeople;
		totalRelative[1] = count1 / (double)totalPeople;
		totalRelative[2] = count2 / (double)totalPeople;
		totalRelative[3] = count3 / (double)totalPeople;
		totalRelative[4] = count4 / (double)totalPeople;

		return new FrequencyTable(group, totalAbsolut, totalRelative);
	}

    /**
     * find the boundary / limit for each groups in selected categories
     * @return the boundaries as double array
     */
    private double[] getBoundary() {
        int numberOfClasses = (int)Math.floor(Math.sqrt(records.size()));			//Klasseneinteilung
        double max = getMax();
        double min = getMin();
        double classWidth = (max - min + ACCURACY) / numberOfClasses;

        DecimalFormat df = new DecimalFormat(THREEDECIMALPLACES);						//formatting to 3 decimals behind comma
        double[] boundary = new double[numberOfClasses+1];								//limit: 5 classes --> 6 limit(boundaries)
        boundary[0] = Double.parseDouble(df.format(min - (ACCURACY/2)));			//initialize first lowest limit
        for(int i = 1; i < boundary.length; i++){
            boundary[i] = Double.parseDouble(df.format(boundary[i-1] + classWidth));
        }
        return boundary;
    }